package trancee/wasmSID/lib

alias @trancee/wasmSID/lib/cpu as @cpu

// Values

// Types and methods
pub struct C64 {
  pub baseaddress : UInt16
  pub mem : @cpu.Memory
  pub cpu : @cpu.CPU
  pub vic : VIC
}
impl C64 {
  get_flags(Self) -> @cpu.UInt8
  load(Self, Array[Int], ~offset : Int = .., ~length : Int = ..) -> Unit
  new(~baseaddress : Int = .., ~data : Array[Int] = .., ~offset : Int = .., ~length : Int = ..) -> Self
  pc(Self) -> Int
  push(Self, @cpu.UInt8) -> Unit
  push16(Self, @cpu.UInt16) -> Unit
  set_flags(Self, @cpu.UInt8) -> Unit
  step(Self) -> Int
}

type CIA
impl CIA {
  acknowledgeCIAIRQ(Self) -> Unit
  new(@cpu.Memory, Int) -> Self
  reset(Self) -> Unit
  writeCIAIRQmask(Self, Int) -> Unit
}

type ControlBitVal

type InterruptBitVal

pub struct NES {
  pub baseaddress : UInt16
  pub mem : @cpu.Memory
  pub cpu : @cpu.CPU
}
impl NES {
  get_flags(Self) -> @cpu.UInt8
  load(Self, Array[Int], ~offset : Int = .., ~length : Int = ..) -> Unit
  new(~baseaddress : Int = .., ~data : Array[Int] = .., ~offset : Int = .., ~length : Int = ..) -> Self
  pc(Self) -> Int
  push(Self, @cpu.UInt8) -> Unit
  push16(Self, @cpu.UInt16) -> Unit
  set_flags(Self, @cpu.UInt8) -> Unit
  step(Self) -> Int
}

pub type UInt16 Int
impl UInt16 {
  compare(Self, Self) -> Int
  debug_write(Self, Buffer) -> Unit
  op_equal(Self, Self) -> Bool
  to_hex(Self) -> String
}

pub type UInt8 Int
impl UInt8 {
  compare(Self, Self) -> Int
  debug_write(Self, Buffer) -> Unit
  op_equal(Self, Self) -> Bool
  to_hex(Self) -> String
}

type VIC
impl VIC {
  acknowledgeVICrasterIRQ(Self) -> Unit
  emulate(Self, Int) -> Int
  new(@cpu.Memory, Int) -> Self
  reset(Self) -> Unit
}

type VICregisters

// Traits

// Extension Methods

