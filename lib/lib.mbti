package trancee/wasmSID/lib

alias @trancee/wasmSID/lib/cpu as @cpu

// Values

// Types and methods
type ADSR

type ADSRState

pub struct C64 {
  pub baseaddress : UInt16
  pub mem : @cpu.Memory
  pub cpu : @cpu.CPU
  pub sid : Array[SID]
  pub cia : Array[CIA]
  pub vic : VIC
  pub model : FixedArray[Model]
  pub realSID : Bool
  pub sampleRate : Int
  pub highQuality : Bool
  pub stereo : Bool
  pub playbackSpeed : Int
  pub paused : Bool
  pub videoStandard : VideoStandard
  pub cpuFrequency : CPUClock
  pub sampleClockRatio : Int
  pub selectedModel : Model
  pub mainVolume : Double
  pub attenuation : Int
  pub timerSource : Int
  pub frameCycles : Int
  pub frameCycleCnt : Int
  pub prevRasterLine : Int
  pub sampleCycleCnt : Int
  pub overSampleCycleCnt : Int
  pub finished : Bool
  pub returned : Bool
  pub irq : Bool
  pub nmi : Bool
  pub prevNMI : Bool
}
impl C64 {
  clear_flags(Self) -> Unit
  clear_registers(Self) -> Unit
  emulate(Self) -> Output
  get_flags(Self) -> @cpu.Flags
  get_registers(Self) -> @cpu.Registers
  hook(Self, Int, (Int) -> Unit) -> Unit
  initC64(Self) -> Unit
  initCPU(Self, ~baseaddress : Int? = ..) -> Unit
  load(Self, FixedArray[Int], ~offset : Int = .., ~length : Int = .., ~has_load_address : Bool = ..) -> Int
  new(~baseaddress : Int = .., ~mem : @cpu.Memory? = .., ~data : FixedArray[Int] = .., ~addr : Int = .., ~length : Int = .., ~sampleRate : Int = .., ~model : FixedArray[Model] = .., ~videoStandard : VideoStandard = .., ~realSID : Bool = .., ~debug : Bool = ..) -> Self
  op_get(Self, UInt16) -> UInt8
  op_set(Self, UInt16, UInt8) -> Unit
  pc(Self) -> Int
  push(Self, @cpu.UInt8) -> Unit
  push16(Self, @cpu.UInt16) -> Unit
  reset(Self) -> Unit!
  setA(Self, Int) -> Unit
  set_flags(Self, @cpu.UInt8) -> Unit
  set_interrupt_flag(Self) -> Unit
}

type CIA
impl CIA {
  acknowledgeCIAIRQ(Self) -> Unit
  emulate(Self, Int) -> Bool
  new(@cpu.CPU, Int, ~videoStandard : VideoStandard = ..) -> Self
  reset(Self, ~videoStandard : VideoStandard = ..) -> Unit
  writeCIAIRQmask(Self, UInt8) -> Unit
}

type CIARegister

type CIAregister
impl CIAregister {
  op_equal(Self, Self) -> Bool
  to_string(Self) -> String
}

type CPUClock
impl CPUClock {
  op_equal(Self, Self) -> Bool
  to_string(Self) -> String
}

pub type CRA UInt8
impl CRA {
  compare(Self, Self) -> Int
  op_equal(Self, Self) -> Bool
}

type CRAFlags

pub type CRB UInt8
impl CRB {
  compare(Self, Self) -> Int
  op_equal(Self, Self) -> Bool
}

type CRBFlags

type Channel
impl Channel {
  op_equal(Self, Self) -> Bool
  to_string(Self) -> String
}

type Color

type ControlA

type ControlB

type ControlRegister
impl ControlRegister {
  default() -> Self
}

type ControlRegisterHorizontal

type ControlRegisterVertical

type Coordinate
impl Coordinate {
  default() -> Self
}

type Envelope
impl Envelope {
  default() -> Self
  to_string(Self) -> String
}

type Exception
impl Exception {
  to_string(Self) -> String
}

type FilterResonanceControl
impl FilterResonanceControl {
  to_string(Self) -> String
}

type FilterSelect
impl FilterSelect {
  default() -> Self
  to_string(Self) -> String
}

pub struct Flags {
  pub player : Int
  pub mode : Mode
  pub videoStandard : VideoStandard
  pub model : FixedArray[Model]
}
impl Flags {
  op_equal(Self, Self) -> Bool
  to_string(Self) -> String
}

type FrameRate
impl FrameRate {
  op_equal(Self, Self) -> Bool
  to_string(Self) -> String
}

pub type ICR UInt8
impl ICR {
  compare(Self, Self) -> Int
  op_equal(Self, Self) -> Bool
}

type ICRFlags

type IRQMask
impl IRQMask {
  default() -> Self
}

type IRQMaskRegister

type InterruptControl
impl InterruptControl {
  default() -> Self
}

type InterruptFlagRegister

type MemoryControlRegister

type Mode
impl Mode {
  op_equal(Self, Self) -> Bool
  to_string(Self) -> String
}

type Model
impl Model {
  op_equal(Self, Self) -> Bool
  to_string(Self) -> String
}

pub struct NES {
  pub baseaddress : UInt16
  pub mem : @cpu.Memory
  pub cpu : @cpu.CPU
}
impl NES {
  load(Self, FixedArray[Int], ~addr : Int = .., ~length : Int = ..) -> Unit
  new(~baseaddress : Int = .., ~data : FixedArray[Int] = .., ~addr : Int = .., ~length : Int = ..) -> Self
  pc(Self) -> Int
  push(Self, @cpu.UInt8) -> Unit
  push16(Self, @cpu.UInt16) -> Unit
  set_flags(Self, @cpu.UInt8) -> Unit
  step(Self) -> Int
}

type Output
impl Output {
  default() -> Self
}

pub struct PSID {
  pub mem : @cpu.Memory
  pub data : FixedArray[Int]
  pub version : Version
  pub realSID : Bool
  pub digiMode : Bool
  pub loadAddress : Int
  pub initAddress : Int
  pub playAddress : Int
  pub endAddress : Int
  pub title : String
  pub author : String
  pub info : String
  pub songs : UInt16
  pub defaultSong : UInt16
  pub flags : Flags
  pub sid2Flags : SIDFlags
  pub sid3Flags : SIDFlags
  pub sid4Flags : SIDFlags
  pub sid2Address : UInt8
  pub sid3Address : UInt8
}
impl PSID {
  new(@cpu.Memory, FixedArray[Int]) -> Self!
  process(Self) -> Unit!
  videoStandard(Self) -> VideoStandard
}

type RunMode
impl RunMode {
  op_equal(Self, Self) -> Bool
  to_string(Self) -> String
}

type SID
impl SID {
  new(@cpu.CPU, Int, ~model : Model = .., ~channel : Channel = .., ~videoStandard : VideoStandard = ..) -> Self
  reset(Self, ~videoStandard : VideoStandard = ..) -> Unit
}

type SIDFlags
impl SIDFlags {
  op_equal(Self, Self) -> Bool
  to_string(Self) -> String
}

type SIDRegister
impl SIDRegister {
  to_string(Self) -> String
}

type SIDheader
impl SIDheader {
  to_string(Self) -> String
}

type SIDregister
impl SIDregister {
  compare(Self, Self) -> Int
  op_equal(Self, Self) -> Bool
  to_string(Self) -> String
}

type SIDspecs

type SIDwavOutput
impl SIDwavOutput {
  default() -> Self
}

type ScanLineCycles
impl ScanLineCycles {
  op_equal(Self, Self) -> Bool
  to_string(Self) -> String
}

type ScanLines
impl ScanLines {
  op_equal(Self, Self) -> Bool
  to_string(Self) -> String
}

type SerialMode
impl SerialMode {
  op_equal(Self, Self) -> Bool
  to_string(Self) -> String
}

type TimeOfDay
impl TimeOfDay {
  default() -> Self
}

type TimerAInputMode

type TimerBInputMode

pub type UInt16 Int
impl UInt16 {
  compare(Self, Self) -> Int
  default() -> Self
  op_equal(Self, Self) -> Bool
  to_hex(Self) -> String
  to_string(Self) -> String
}

pub type UInt8 Int
impl UInt8 {
  compare(Self, Self) -> Int
  default() -> Self
  op_equal(Self, Self) -> Bool
  to_hex(Self) -> String
  to_string(Self) -> String
}

type VIC
impl VIC {
  acknowledgeVICrasterIRQ(Self) -> Unit
  emulate(Self, Int) -> Bool
  new(@cpu.CPU, Int, ~videoStandard : VideoStandard = ..) -> Self
  reset(Self, ~videoStandard : VideoStandard = ..) -> Unit
}

type VICInterruptFlag
impl VICInterruptFlag {
  default() -> Self
}

type VICRegister

type VICregister
impl VICregister {
  compare(Self, Self) -> Int
  op_equal(Self, Self) -> Bool
  to_string(Self) -> String
}

type Version
impl Version {
  op_equal(Self, Self) -> Bool
  to_string(Self) -> String
}

type VideoStandard
impl VideoStandard {
  op_equal(Self, Self) -> Bool
  to_string(Self) -> String
}

type Voice
impl Voice {
  default() -> Self
  to_string(Self) -> String
}

type VoiceControl
impl VoiceControl {
  default() -> Self
  to_string(Self) -> String
}

type Wave

type Waveform
impl Waveform {
  op_equal(Self, Self) -> Bool
}

// Type aliases

// Traits

// Extension Methods
impl Show for CIAregister

impl Show for CPUClock

impl Show for Channel

impl Show for Envelope

impl Show for Exception

impl Show for FilterResonanceControl

impl Show for FilterSelect

impl Show for Flags

impl Show for FrameRate

impl Show for Mode

impl Show for Model

impl Show for RunMode

impl Show for SIDFlags

impl Show for SIDRegister

impl Show for SIDheader

impl Show for SIDregister

impl Show for ScanLineCycles

impl Show for ScanLines

impl Show for SerialMode

impl Show for UInt16

impl Show for UInt8

impl Show for VICregister

impl Show for Version

impl Show for VideoStandard

impl Show for Voice

impl Show for VoiceControl

