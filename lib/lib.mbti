package trancee/wasmSID/lib

alias @trancee/wasmSID/lib/cpu as @cpu

// Values

// Types and methods
type AttackDecayCycleControl

pub struct C64 {
  pub baseaddress : UInt16
  pub mem : @cpu.Memory
  pub cpu : @cpu.CPU
  pub sid : Array[SID]
  pub cia : Array[CIA]
  pub vic : VIC
  pub psid : PSID
  pub sampleRate : Int
  pub highQuality : Bool
  pub stereo : Bool
  pub playbackSpeed : Int
  pub paused : Bool
  pub videoStandard : VideoStandard
  pub cpuFrequency : CPUClock
  pub sampleClockRatio : Int
  pub selectedModel : Model
  pub mainVolume : Double
  pub attenuation : Int
  pub timerSource : Int
  pub frameCycles : Int
  pub frameCycleCnt : Int
  pub prevRasterLine : Int
  pub sampleCycleCnt : Int
  pub overSampleCycleCnt : Int
  pub finished : Bool
  pub returned : Bool
  pub irq : Int
  pub nmi : Int
  pub prevNMI : Int
}
impl C64 {
  emulate(Self) -> Tuple[Int, Int]
  get_flags(Self) -> @cpu.UInt8
  initC64(Self) -> Unit
  initCPU(Self, ~baseaddress : Int? = ..) -> Unit
  load(Self, Array[Int], ~offset : Int = .., ~length : Int = ..) -> Unit
  new(~baseaddress : Int = .., ~mem : @cpu.Memory? = .., ~data : Array[Int] = .., ~offset : Int = .., ~length : Int = .., ~sampleRate : Int = .., ~psid : PSID) -> Self
  pc(Self) -> Int
  push(Self, @cpu.UInt8) -> Unit
  push16(Self, @cpu.UInt16) -> Unit
  reset(Self) -> Unit!String
  setA(Self, Int) -> Unit
  set_flags(Self, @cpu.UInt8) -> Unit
  step(Self) -> Int
}

type CIA
impl CIA {
  acknowledgeCIAIRQ(Self) -> Unit
  emulate(Self, UInt8) -> Bool
  new(@cpu.Memory, Int, ~videoStandard : VideoStandard = ..) -> Self
  reset(Self, VideoStandard) -> Unit
  writeCIAIRQmask(Self, UInt8) -> Unit
}

type CPUClock
impl CPUClock {
  op_equal(Self, Self) -> Bool
  output(Self, Logger) -> Unit
  to_string(Self) -> String
}

pub type CRA UInt8
impl CRA {
  compare(Self, Self) -> Int
  op_equal(Self, Self) -> Bool
}

type CRAFlags

pub type CRB UInt8
impl CRB {
  compare(Self, Self) -> Int
  op_equal(Self, Self) -> Bool
}

type CRBFlags

type Channel
impl Channel {
  op_equal(Self, Self) -> Bool
  output(Self, Logger) -> Unit
  to_string(Self) -> String
}

type ControlRegisterHorizontal

type ControlRegisterVertical

type FilterResonanceControlRegister

type Flags
impl Flags {
  op_equal(Self, Self) -> Bool
  output(Self, Logger) -> Unit
  to_string(Self) -> String
}

type FrameRate
impl FrameRate {
  op_equal(Self, Self) -> Bool
  output(Self, Logger) -> Unit
  to_string(Self) -> String
}

pub type ICR UInt8
impl ICR {
  compare(Self, Self) -> Int
  op_equal(Self, Self) -> Bool
}

type ICRFlags

type IRQMaskRegister

type InterruptFlagRegister

type MemoryControlRegister

type Mode
impl Mode {
  op_equal(Self, Self) -> Bool
  output(Self, Logger) -> Unit
  to_string(Self) -> String
}

type Model
impl Model {
  op_equal(Self, Self) -> Bool
  output(Self, Logger) -> Unit
  to_string(Self) -> String
}

pub struct NES {
  pub baseaddress : UInt16
  pub mem : @cpu.Memory
  pub cpu : @cpu.CPU
}
impl NES {
  get_flags(Self) -> @cpu.UInt8
  load(Self, Array[Int], ~offset : Int = .., ~length : Int = ..) -> Unit
  new(~baseaddress : Int = .., ~data : Array[Int] = .., ~offset : Int = .., ~length : Int = ..) -> Self
  pc(Self) -> Int
  push(Self, @cpu.UInt8) -> Unit
  push16(Self, @cpu.UInt16) -> Unit
  set_flags(Self, @cpu.UInt8) -> Unit
  step(Self) -> Int
}

pub struct PSID {
  pub mem : @cpu.Memory
  pub data : Array[Int]
  pub version : Version
  pub realSID : Bool
  pub digiMode : Bool
  pub loadAddress : UInt16
  pub initAddress : UInt16
  pub playAddress : UInt16
  pub endAddress : UInt16
  pub title : String
  pub author : String
  pub info : String
  pub songs : UInt16
  pub defaultSong : UInt16
  pub flags : Flags
  pub model : Array[Model]
  pub sid2Flags : SIDFlags
  pub sid3Flags : SIDFlags
  pub sid4Flags : SIDFlags
  pub sid2Address : UInt8
  pub sid3Address : UInt8
}
impl PSID {
  new(@cpu.Memory, Array[Int]) -> Self!String
  output(Self, Logger) -> Unit
  process(Self) -> Unit!String
  to_string(Self) -> String
}

type Register
impl Register {
  op_equal(Self, Self) -> Bool
  output(Self, Logger) -> Unit
  to_string(Self) -> String
}

type SID
impl SID {
  new(@cpu.Memory, Int, ~model : Model = .., ~channel : Channel = ..) -> Self
  reset(Self) -> Unit
}

type SIDFlags
impl SIDFlags {
  op_equal(Self, Self) -> Bool
  output(Self, Logger) -> Unit
  to_string(Self) -> String
}

type SIDheader
impl SIDheader {
  output(Self, Logger) -> Unit
  to_string(Self) -> String
}

type SIDregister
impl SIDregister {
  compare(Self, Self) -> Int
  op_equal(Self, Self) -> Bool
  output(Self, Logger) -> Unit
  to_string(Self) -> String
}

type ScanLineCycles
impl ScanLineCycles {
  op_equal(Self, Self) -> Bool
  output(Self, Logger) -> Unit
  to_string(Self) -> String
}

type ScanLines
impl ScanLines {
  op_equal(Self, Self) -> Bool
  output(Self, Logger) -> Unit
  to_string(Self) -> String
}

type SustainReleaseCycleControl

pub type UInt16 Int
impl UInt16 {
  compare(Self, Self) -> Int
  op_equal(Self, Self) -> Bool
  output(Self, Logger) -> Unit
  to_hex(Self) -> String
  to_string(Self) -> String
}

pub type UInt8 Int
impl UInt8 {
  compare(Self, Self) -> Int
  op_equal(Self, Self) -> Bool
  output(Self, Logger) -> Unit
  to_hex(Self) -> String
  to_string(Self) -> String
}

type VIC
impl VIC {
  acknowledgeVICrasterIRQ(Self) -> Unit
  emulate(Self, Int) -> Bool
  new(@cpu.Memory, Int) -> Self
  reset(Self) -> Unit
}

type VICregister
impl VICregister {
  compare(Self, Self) -> Int
  op_equal(Self, Self) -> Bool
  output(Self, Logger) -> Unit
  to_string(Self) -> String
}

type Version
impl Version {
  op_equal(Self, Self) -> Bool
  output(Self, Logger) -> Unit
  to_string(Self) -> String
}

type VideoStandard
impl VideoStandard {
  op_equal(Self, Self) -> Bool
  output(Self, Logger) -> Unit
  to_string(Self) -> String
}

type VoiceControlRegister

type VolumeFilterSelectRegister

// Traits

// Extension Methods

